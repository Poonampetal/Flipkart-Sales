CREATE DATABASE FLIPKART;
USE FLIPKART;

-- Data Validation Queries
SELECT * FROM customer_data;
SELECT * FROM sales_data;
SELECT * FROM product_data;

-- Checking for unique Customer ID.
SELECT distinct customer_ID from customer_data;
SELECT count(*) from customer_data;
SELECT count(distinct customer_ID) FROM customer_data;

-- total record are 107 and all the records are unique.

SELECT distinct customer_ID from sales_data;
SELECT count(*) from sales_data;
SELECT count(distinct customer_ID) FROM sales_data;
SELECT count(distinct Product_ID) FROM sales_data;

-- total record are 100 but unique customer_id is 97, hence there are some duplicates customer or some customer who have not purchased more than 1 item.

SELECT distinct Product_ID from product_data;
SELECT count(*) from product_data;
SELECT count(distinct Product_ID) FROM product_data;

-- total record are 100 and all the records are unique.

-- DATA ALTERATION
-- Converting the data type

DESC sales_data;
ALTER TABLE customer_data
MODIFY Order_Date DATE;

DESC customer_data;
ALTER TABLE customer_data
MODIFY Join_Date DATE;

DESC product_data;
ALTER TABLE customer_data
MODIFY Join_Date DATE;

-- Data Cleaning Queries

-- Handle Missing Data

UPDATE product_data 
SET Stock_Quantity = 0
WHERE Stock_Quantity IS NULL;

-- Remove Duplicates

CREATE TEMPORARY TABLE Temp_Sales AS
SELECT MIN(Order_ID) AS Order_ID FROM sales_data GROUP BY Order_ID;

DELETE FROM sales_data WHERE Order_ID NOT IN (SELECT Order_ID FROM Temp_Sales);

DROP TEMPORARY TABLE Temp_Sales;

-- Exploratorty Data Analysis

-- 1) Total Sales & Number of Orders by region.

SELECT 
    Region,
    COUNT(Order_ID) AS Total_Orders,
    SUM(Total_Sales) AS Total_Revenue
FROM
    sales_data
GROUP BY Region
ORDER BY Total_Revenue DESC;

/* This data show the highest revenue generated by East Region.*/

-- 2) Monthly Sales Trends.

SELECT 
    DATE_FORMAT(Order_Date, '%Y-%m') AS Month,
    SUM(Total_Sales) AS MonthlyRevenue
FROM
    sales_data
GROUP BY Month
ORDER BY Month;

/* This data show the how revenue has changed over month.*/

-- 3) Top 5 Customers by Total Spending

SELECT 
    C.Customer_ID,
    C.Customer_Name,
    SUM(S.Total_Sales) AS Total_Spent
FROM
    sales_data S
        JOIN
    Customer_data C ON S.Customer_ID = C.Customer_ID
GROUP BY C.Customer_ID , C.Customer_Name
ORDER BY Total_Spent DESC
LIMIT 5;

/* This data show high value customers.*/

-- 4) Product Categories Revenue Breakdown

SELECT 
    P.Category, SUM(S.Total_Sales) AS Total_Revenue
FROM
    sales_data S
        JOIN
    product_data P ON S.Product_ID = P.Product_ID
GROUP BY P.Category
ORDER BY Total_Revenue;

/* This data shows Electronic products are most demanding.*/

-- 5) Top 5 Best Selling Products

SELECT 
    P.Product_Name,
    P.Product_ID,
    SUM(S.Total_Sales) AS Total_Revenue,
    SUM(S.Quantity) AS Total_Unit_sold
FROM
    sales_data S
        JOIN
    product_data P ON S.Product_ID = P.Product_ID
GROUP BY P.Product_Name , P.Product_ID
ORDER BY Total_Revenue DESC
LIMIT 5;

/* This data shows Desktop related products are best seller.*/

-- 6) Customer Retention Rate (New vs. Returning Customers)

SELECT 
    SUM(CASE WHEN Order_Count = 1 THEN 1 ELSE 0 END) AS New_Customer_Count,
    SUM(CASE WHEN Order_Count > 1 THEN 1 ELSE 0 END) AS Repeat_Customer_Count
FROM (
    SELECT Customer_ID, COUNT(Order_ID) AS Order_Count
    FROM Sales_Data
    GROUP BY Customer_ID
) AS Customer_Orders;

/* This data shows most customer are one time purchaser.*/

-- 7) Highest-Spending Customers by Region

SELECT 
    S.Region, C.Customer_Name, SUM(S.Total_Sales) AS Total_Spent
FROM
    sales_data S
        JOIN
    customer_data C ON S.Customer_ID = C.Customer_ID
GROUP BY S.Region , C.Customer_Name
ORDER BY S.Region , Total_Spent DESC;

/* This data Shows top customers per region.*/

-- 8) Customer Segmentation (Based on Spending)

SELECT 
    C.Customer_ID,
    C.Customer_Name,
    SUM(S.Total_Sales) AS Total_Spent,
    CASE
        WHEN SUM(S.Total_Sales) > 150 THEN 'High-Value'
        WHEN SUM(S.Total_Sales) BETWEEN 100 AND 150 THEN 'Medium-Value'
        ELSE 'Low-Value'
    END AS CustomerSegment
FROM
    sales_data S
        JOIN
    Customer_data C ON S.Customer_ID = C.Customer_ID
GROUP BY C.Customer_ID , C.Customer_Name
ORDER BY Total_Spent DESC;

/* This data Shows customers segementation based on spending.*/









